# https://www.keycloak.org/server/all-config
type Keycloak::Configs = Struct[
  {
    Optional['cache'] => Enum['local', 'ispn'],
    Optional['cache-config-file'] => String[1],
    Optional['cache-embedded-mtls-enabled'] => Boolean,
    Optional['cache-embedded-mtls-key-store-file'] => String[1],
    Optional['cache-embedded-mtls-key-store-password'] => Variant[String[1], Sensitive],
    Optional['cache-embedded-mtls-trust-store-file'] => String[1],
    Optional['cache-embedded-mtls-trust-store-password'] => Variant[String[1], Sensitive],
    Optional['cache-remote-host'] => Variant[Stdlib::Host, Stdlib::IP::Address],
    Optional['cache-remote-password'] => Variant[String[1], Sensitive],
    Optional['cache-remote-port'] => Stdlib::Port,
    Optional['cache-remote-username'] => String[1],
    Optional['cache-stack'] => Enum['tcp','udp','kubernetes','ec2','azure','google'],
    Optional['db'] => Enum['dev-file','dev-mem','mariadb','mysql','oracle','postgres'],
    Optional['db-password'] => String[1],
    Optional['db-pool-initial-size'] => Integer,
    Optional['db-pool-max-size'] => Integer,
    Optional['db-pool-min-size'] => Integer,
    Optional['db-schema'] => String[1],
    Optional['db-url'] => String[1],
    Optional['db-url-database'] => String[1],
    Optional['db-url-host'] => Stdlib::Host,
    Optional['db-url-port'] => Stdlib::Port,
    Optional['db-url-properties'] => String[1],
    Optional['db-username'] => String[1],
    Optional['transaction-xa-enabled'] => Boolean,
    Optional['features'] => Array[String[1]],
    Optional['features-disabled'] => Array[String[1]],
    Optional['hostname'] => Variant[Stdlib::Host, Stdlib::HTTPUrl, Stdlib::HTTPSUrl],
    Optional['hostname-admin'] => Variant[Stdlib::HTTPUrl, Stdlib::HTTPSUrl],
    Optional['hostname-backchannel-dynamic'] => Boolean,
    Optional['hostname-debug'] => Boolean,
    Optional['hostname-strict'] => Boolean,
    Optional['http-enabled'] => Boolean,
    Optional['http-host'] => Stdlib::Host,
    Optional['http-max-queued-requests'] => Integer,
    Optional['http-pool-max-threads'] => Integer,
    Optional['http-port'] => Stdlib::Port,
    Optional['http-relative-path'] => String[1],
    Optional['https-certificate-file'] => Stdlib::Absolutepath,
    Optional['https-certificate-key-file'] => Stdlib::Absolutepath,
    Optional['https-cipher-suites'] => Array[String[1]],
    Optional['https-client-auth'] => Enum['none','request','required'],
    Optional['https-key-store-file'] => Stdlib::Absolutepath,
    Optional['https-key-store-password'] => Variant[String[1], Sensitive],
    Optional['https-key-store-type'] => String[1],
    Optional['https-port'] => Stdlib::Port,
    Optional['https-protocols'] => Array[String[1]],
    Optional['https-trust-store-file'] => Stdlib::Absolutepath,
    Optional['https-trust-store-password'] => Variant[String[1], Sensitive],
    Optional['https-trust-store-type'] => String[1],
    Optional['health-enabled'] => Boolean,
    Optional['config-keystore'] => String[1],
    Optional['config-keystore-password'] => Variant[String[1], Sensitive],
    Optional['config-keystore-type'] => Enum['PKCS12'],
    Optional['metrics-enabled'] => Boolean,
    Optional['proxy'] => Enum['edge','reencrypt','passthrough','none'],
    Optional['proxy-headers'] => Enum['forwarded', 'xforwarded'],
    Optional['vault'] => Enum['file','keystore'],
    Optional['vault-dir'] => Stdlib::Absolutepath,
    Optional['vault-file'] => Stdlib::Absolutepath,
    Optional['vault-pass'] => Variant[String[1], Sensitive],
    Optional['vault-type'] => Enum['PKCS12'],
    Optional['log'] => Array[Enum['console','file','gelf']],
    Optional['log-console-color'] => Boolean,
    Optional['log-console-format'] => String[1],
    Optional['log-console-output'] => Enum['default','json'],
    Optional['log-file'] => String[1],
    Optional['log-file-format'] => String[1],
    Optional['log-file-output'] => Enum['default','json'],
    Optional['log-gelf-facility'] => String[1],
    Optional['log-gelf-host'] => Stdlib::Host,
    Optional['log-gelf-include-location'] => Boolean,
    Optional['log-gelf-include-message-parameters'] => Boolean,
    Optional['log-gelf-include-stack-trace'] => Boolean,
    Optional['log-gelf-level'] => String[1],
    Optional['log-gelf-max-message-size'] => Integer,
    Optional['log-gelf-port'] => Stdlib::Port,
    Optional['log-gelf-timestamp-format'] => String[1],
    Optional['log-level'] => String[1],
    Optional['tls-hostname-verifier'] => Enum['ANY','WILDCARD','STRICT'],
    Optional['truststore-paths'] => Array[String[1]],
    Optional['fips-mode'] => Enum['non-strict','strict'],
    Optional['dir'] => Stdlib::Absolutepath,
    Optional['realm'] => String[1],
    Optional['users'] => Enum['skip','realm_file','same_file','different_files'],
    Optional['users-per-file'] => Integer,
    Optional['file'] => Stdlib::Absolutepath,
    Optional['override'] => Boolean,
  }
]
